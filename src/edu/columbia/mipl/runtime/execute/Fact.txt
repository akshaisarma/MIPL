        public Fact(Term term) {
                Knowledge prevKnow;
                Fact prevFact;
                Term prevTerm;
                Term matrixTerm;

                PrimitiveMatrix matrix;
                int row;
                int col;

                assert (term.getType() == Term.Type.TERM);

                prevKnow = registerKnowledge();
                if (prevKnow instanceof Rule) {
                        assert(false);
                        /* throw new TermRedefineExistingRuleException() */;
                }

                prevFact = (Fact) prevKnow;
                prevTerm = prevFact.getTerm();
                if (prevTerm.containVariables() || prevTerm.getArguments().size() != term.getArguments().size()) {
                        /* throw new UnmergeableFactsException() */;
                }

                if (prevTerm.getType() == Term.Type.MATRIX)  {
                        matrixTerm = prevTerm;
                        matrix = matrixTerm.getMatrix();
                        matrix.increaseRow();
                }
                else {
                        matrixTerm = new Term(Term.Type.MATRIX, term.getName(), new PrimitiveDoubleArray(2, prevTerm.getArguments().size()));
                        matrix = matrixTerm.getMatrix();

                        col = 0;
                        for (Term t : prevTerm.getArguments()) {
                                if (t.getType() != Term.Type.NUMBER)
                                        /* throw new UnmergeableFactsException() */;

                                matrix.setValue(0, col, t.getValue());
                                col++;
                        }
                }
                row = matrix.getRow() - 1;
                i = 0;
                for (Term t : term.getArguments()) {
                        if (t.getType() != Term.Type.NUMBER)
                                /* throw new UnmergeableFactsException() */;
                        matrix.setValue(row, col, t.getValue());
                        col++;
                }
                this.term = matrixTerm;
        }
